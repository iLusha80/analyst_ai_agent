# frontend-streamlit/app.py (–í–ï–†–°–ò–Ø –î–õ–Ø –ü–†–ò–ï–ú–ê –°–¢–†–£–ö–¢–£–†–ò–†–û–í–ê–ù–ù–´–• –î–ê–ù–ù–´–•)

import streamlit as st
import pandas as pd

from lc_agent.agent_builder import create_lc_agent

st.set_page_config(page_title="Insight Agent", page_icon="üí°", layout="wide")

@st.cache_resource
def load_agent():
    return create_lc_agent()

if "messages" not in st.session_state:
    st.session_state.messages = [
        {"role": "assistant", "content": "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø Insight Agent. –ó–∞–¥–∞–π—Ç–µ –º–Ω–µ –≤–æ–ø—Ä–æ—Å –ø–æ –¥–∞–Ω–Ω—ã–º."}
    ]

with st.sidebar:
    st.title("üí° Insight Agent")
    st.info("–ü—Ä–æ—Ç–æ—Ç–∏–ø AI-–∞–≥–µ–Ω—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö.")
    st.markdown("---")
    st.markdown("–ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É '–û–ø–∏—Å–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö', —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã.")

st.title("üí¨ –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π —á–∞—Ç")

for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        if isinstance(message["content"], pd.DataFrame):
            st.dataframe(message["content"])
        else:
            st.markdown(message["content"])

agent_executor = load_agent()

# –ü—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
predefined_queries = [
    "–°–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤?",
    "–ü–æ–∫–∞–∂–∏ —Å—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤.",
    "–°–∫–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç?",
    "–ü–æ–∫–∞–∂–∏ —Ç–æ–ø-5 –≥–æ—Ä–æ–¥–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü.",
    "–ö–∞–∫–æ–π —Å—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥ –æ—Ç –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –æ–¥–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Ä–∞–∑—Ä–µ–∑–µ –∫–∞–Ω–∞–ª–æ–≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–¥?"
]

st.markdown("---")
st.subheader("–ë—ã—Å—Ç—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã:")
cols = st.columns(5)
for i, query in enumerate(predefined_queries):
    with cols[i]:
        if st.button(query):
            st.session_state.chat_input_value = query
            st.session_state.send_message_flag = True

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è chat_input_value, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
if "chat_input_value" not in st.session_state:
    st.session_state.chat_input_value = ""

# –ü–æ–ª–µ –≤–≤–æ–¥–∞ —á–∞—Ç–∞ –≤—Å–µ–≥–¥–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è
prompt = st.chat_input("–ù–∞–ø—Ä–∏–º–µ—Ä: –ü–æ–∫–∞–∂–∏ –ø–µ—Ä–≤—ã—Ö 5 –∫–ª–∏–µ–Ω—Ç–æ–≤", value=st.session_state.chat_input_value, key="chat_input")

# –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å (–∏–∑ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –∏–∑ –ø–æ–ª—è –≤–≤–æ–¥–∞)
if prompt or st.session_state.get("send_message_flag"):
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
    st.session_state.send_message_flag = False
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è –≤–≤–æ–¥–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
    st.session_state.chat_input_value = ""

    st.session_state.messages.append({"role": "user", "content": prompt})
    with st.chat_message("user"):
        st.markdown(prompt)

    with st.chat_message("assistant"):
        with st.spinner("ü§ñ –î—É–º–∞—é..."):
            try:
                agent_input = {"input": prompt}
                response_dict = agent_executor.invoke(agent_input)
                
                # --- –õ–û–ì–ò–ö–ê –ü–ï–†–ï–•–í–ê–¢–ê –°–¢–†–£–ö–¢–£–†–ò–†–û–í–ê–ù–ù–û–ô –¢–ê–ë–õ–ò–¶–´ ---
                if 'intermediate_steps' in response_dict:
                    for action, result in response_dict['intermediate_steps']:
                        if action.tool == 'display_table':
                            # action.tool_input —Ç–µ–ø–µ—Ä—å - —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å, –∞ –Ω–µ —Å—Ç—Ä–æ–∫–∞
                            tool_input = action.tool_input
                            df = pd.DataFrame(tool_input['data'], columns=tool_input['columns'])
                            st.dataframe(df)
                            st.session_state.messages.append({"role": "assistant", "content": df})
                
                response_content = response_dict['output']
                st.markdown(response_content)
                st.session_state.messages.append({"role": "assistant", "content": response_content})

            except Exception as e:
                import traceback
                print(traceback.format_exc())
                response_content = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}"
                st.error(response_content)
                st.session_state.messages.append({"role": "assistant", "content": response_content})