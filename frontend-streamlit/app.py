# frontend-streamlit/app.py (–ù–û–í–ê–Ø –ì–õ–ê–í–ù–ê–Ø –°–¢–†–ê–ù–ò–¶–ê)

import streamlit as st
import pandas as pd
import ast

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à—É —Å—Ç–∞–±–∏–ª—å–Ω—É—é "—Ñ–∞–±—Ä–∏–∫—É" –∞–≥–µ–Ω—Ç–æ–≤
from lc_agent.agent_builder import create_lc_agent

# --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---

st.set_page_config(
    page_title="Insight Agent",
    page_icon="üí°",
    layout="wide"
)


# –ö—ç—à–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
@st.cache_resource
def load_agent():
    return create_lc_agent()


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –ø—Ä—è–º–æ –∑–¥–µ—Å—å
if "messages" not in st.session_state:
    st.session_state.messages = [
        {"role": "assistant", "content": "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø Insight Agent. –ó–∞–¥–∞–π—Ç–µ –º–Ω–µ –≤–æ–ø—Ä–æ—Å –ø–æ –¥–∞–Ω–Ω—ã–º."}
    ]

# --- –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å (Sidebar) ---
with st.sidebar:
    st.title("üí° Insight Agent")
    st.info("–ü—Ä–æ—Ç–æ—Ç–∏–ø AI-–∞–≥–µ–Ω—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö. –≠—Ç–∞ –≤–µ—Ä—Å–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω—ã–π SQL-–∞–≥–µ–Ω—Ç LangChain.")
    st.markdown("---")
    st.markdown("–ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É '–û–ø–∏—Å–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö', —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã.")

# --- –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —á–∞—Ç–∞ ---
st.title("üí¨ –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π —á–∞—Ç")

# –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        if isinstance(message["content"], pd.DataFrame):
            st.dataframe(message["content"])
        else:
            st.markdown(message["content"])

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–≥–µ–Ω—Ç–∞
agent_executor = load_agent()

# –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –≤–æ–ø—Ä–æ—Å–∞
if prompt := st.chat_input("–ù–∞–ø—Ä–∏–º–µ—Ä: –ü–æ–∫–∞–∂–∏ –ø–µ—Ä–≤—ã—Ö 5 –∫–ª–∏–µ–Ω—Ç–æ–≤"):
    st.session_state.messages.append({"role": "user", "content": prompt})
    with st.chat_message("user"):
        st.markdown(prompt)

    with st.chat_message("assistant"):
        with st.spinner("ü§ñ –î—É–º–∞—é..."):
            try:
                agent_input = {"input": prompt}
                response_dict = agent_executor.invoke(agent_input)

                table_displayed = False
                if 'intermediate_steps' in response_dict:
                    for action, result in response_dict['intermediate_steps']:
                        if action.tool == 'display_table':
                            try:
                                data = ast.literal_eval(action.tool_input)
                                df = pd.DataFrame(data)
                                st.dataframe(df)
                                st.session_state.messages.append({"role": "assistant", "content": df})
                                table_displayed = True
                            except Exception as e:
                                st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É: {e}")

                response_content = response_dict['output']
                st.markdown(response_content)
                st.session_state.messages.append({"role": "assistant", "content": response_content})

            except Exception as e:
                import traceback

                print(traceback.format_exc())
                response_content = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}"
                st.error(response_content)
                st.session_state.messages.append({"role": "assistant", "content": response_content})