import streamlit as st
import pandas as pd
import json

from lc_agent.agent_builder import create_lc_agent

st.set_page_config(page_title="Insight Agent", page_icon="üí°", layout="wide")

# --- –§–£–ù–ö–¶–ò–ò –° –ö–≠–®–ò–†–û–í–ê–ù–ò–ï–ú ---

@st.cache_data
def load_quick_queries(file_path="frontend-streamlit/queries.json"):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –±—ã—Å—Ç—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∏–∑ JSON-—Ñ–∞–π–ª–∞."""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError) as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ —Å –∑–∞–ø—Ä–æ—Å–∞–º–∏: {e}")
        return []

@st.cache_resource
def load_agent():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –∫—ç—à–∏—Ä—É–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä AI-–∞–≥–µ–Ω—Ç–∞."""
    return create_lc_agent()

# --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø SESSION STATE ---

if "messages" not in st.session_state:
    st.session_state.messages = [
        {"role": "assistant", "content": "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø Insight Agent. –ó–∞–¥–∞–π—Ç–µ –º–Ω–µ –≤–æ–ø—Ä–æ—Å –ø–æ –¥–∞–Ω–Ω—ã–º."}
    ]

if "last_processed_message" not in st.session_state:
    st.session_state.last_processed_message = None


# --- –ë–û–ö–û–í–ê–Ø –ü–ê–ù–ï–õ–¨ (SIDEBAR) ---

with st.sidebar:
    st.title("üí° Insight Agent")
    st.info("–ü—Ä–æ—Ç–æ—Ç–∏–ø AI-–∞–≥–µ–Ω—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö.")
    st.markdown("---")
    st.markdown("–ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É '–û–ø–∏—Å–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö', —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã.")

# --- –û–°–ù–û–í–ù–û–ô –ò–ù–¢–ï–†–§–ï–ô–° –ß–ê–¢–ê ---

st.title("üí¨ –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π —á–∞—Ç")

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ session_state
for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        if isinstance(message["content"], pd.DataFrame):
            st.dataframe(message["content"])
        else:
            st.markdown(message["content"])

# –ó–∞–≥—Ä—É–∑–∫–∞ –∞–≥–µ–Ω—Ç–∞
agent_executor = load_agent()

# --- –ë–õ–û–ö –ë–´–°–¢–†–´–• –ó–ê–ü–†–û–°–û–í (–í–ù–£–¢–†–ò –°–í–û–†–ê–ß–ò–í–ê–ï–ú–û–ì–û st.expander) ---

st.markdown("---")

predefined_queries = load_quick_queries()

if predefined_queries:
    # ### –ì–õ–ê–í–ù–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï ###
    # –í–µ—Å—å –±–ª–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Ç–µ–ø–µ—Ä—å –æ–±–µ—Ä–Ω—É—Ç –≤ st.expander.
    # –û–Ω –±—É–¥–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–≤–µ—Ä–Ω—É—Ç (expanded=False). 
    # –ú–æ–∂–µ—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å True, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –æ–Ω –±—ã–ª –æ—Ç–∫—Ä—ã—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
    with st.expander("üöÄ –ü–æ–∫–∞–∑–∞—Ç—å –±—ã—Å—Ç—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã", expanded=False):
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Å–∫–æ–ª—å–∫–æ –∫–Ω–æ–ø–æ–∫ –±—É–¥–µ—Ç –≤ –æ–¥–Ω–æ–º —Ä—è–¥—É
        COLS_PER_ROW = 3

        # –†–∞–∑–±–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ "—Ä—è–¥—ã"
        for i in range(0, len(predefined_queries), COLS_PER_ROW):
            chunk = predefined_queries[i:i + COLS_PER_ROW]
            cols = st.columns(COLS_PER_ROW)

            for j, query in enumerate(chunk):
                if cols[j].button(query, key=query, use_container_width=True):
                    st.session_state.user_input = query
                    st.rerun()

# --- –õ–û–ì–ò–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò –í–í–û–î–ê –ò –í–´–ó–û–í–ê –ê–ì–ï–ù–¢–ê (–ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô) ---

chat_prompt = st.chat_input("–ù–∞–ø—Ä–∏–º–µ—Ä: –ü–æ–∫–∞–∂–∏ –ø–µ—Ä–≤—ã—Ö 5 –∫–ª–∏–µ–Ω—Ç–æ–≤")
prompt_to_process = chat_prompt or st.session_state.get("user_input")

if prompt_to_process:
    if "user_input" in st.session_state:
        del st.session_state.user_input

    st.session_state.messages.append({"role": "user", "content": prompt_to_process})
    st.rerun()

last_message = st.session_state.messages[-1]
if last_message["role"] == "user" and st.session_state.get("last_processed_message") != last_message["content"]:
    
    with st.chat_message("assistant"):
        with st.spinner("ü§ñ –î—É–º–∞—é..."):
            try:
                prompt = last_message["content"]
                st.session_state.last_processed_message = prompt
                agent_input = {"input": prompt}
                response_dict = agent_executor.invoke(agent_input)
                
                if 'intermediate_steps' in response_dict and response_dict['intermediate_steps']:
                    for action, result in reversed(response_dict['intermediate_steps']):
                        if action.tool == 'display_table' and isinstance(action.tool_input, dict):
                            tool_input = action.tool_input
                            df = pd.DataFrame(tool_input.get('data', []), columns=tool_input.get('columns', []))
                            st.dataframe(df)
                            st.session_state.messages.append({"role": "assistant", "content": df})
                            break
                
                response_content = response_dict.get('output', '–ù–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.')
                if response_content:
                    st.markdown(response_content)
                    st.session_state.messages.append({"role": "assistant", "content": response_content})

            except Exception as e:
                import traceback
                error_message = traceback.format_exc()
                print(error_message)
                response_content = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}"
                st.error(response_content)
                st.session_state.messages.append({"role": "assistant", "content": response_content})
    
    st.rerun()