import streamlit as st
import pandas as pd
from lc_agent.agent_builder import create_lc_agent

st.set_page_config(page_title="Insight Agent", page_icon="üí°", layout="wide")

@st.cache_resource
def load_agent():
    return create_lc_agent()

if "messages" not in st.session_state:
    st.session_state.messages = [
        {"role": "assistant", "content": "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø Insight Agent. –ó–∞–¥–∞–π—Ç–µ –º–Ω–µ –≤–æ–ø—Ä–æ—Å –ø–æ –¥–∞–Ω–Ω—ã–º."}
    ]

with st.sidebar:
    st.title("üí° Insight Agent")
    st.info("–ü—Ä–æ—Ç–æ—Ç–∏–ø AI-–∞–≥–µ–Ω—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö.")
    st.markdown("---")
    st.markdown("–ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É '–û–ø–∏—Å–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö', —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã.")

st.title("üí¨ –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π —á–∞—Ç")

for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        if isinstance(message["content"], pd.DataFrame):
            st.dataframe(message["content"])
        else:
            st.markdown(message["content"])

agent_executor = load_agent()

# --- –õ–æ–≥–∏–∫–∞ –∫–Ω–æ–ø–æ–∫ ---
predefined_queries = [
    "–°–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤?",
    "–ü–æ–∫–∞–∂–∏ —Å—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤.",
    "–°–∫–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç?",
    "–ü–æ–∫–∞–∂–∏ —Ç–æ–ø-5 –≥–æ—Ä–æ–¥–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü.",
    "–ö–∞–∫–æ–π —Å—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥ –æ—Ç –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –æ–¥–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Ä–∞–∑—Ä–µ–∑–µ –∫–∞–Ω–∞–ª–æ–≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–¥?"
]

st.markdown("---")
st.subheader("–ë—ã—Å—Ç—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã:")
cols = st.columns(5)
for i, query in enumerate(predefined_queries):
    if cols[i].button(query, key=f"query_btn_{i}"):
        # –ü—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ. Streamlit —Å–∞–º –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç —Å–∫—Ä–∏–ø—Ç.
        st.session_state.user_input = query
        # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç, —á—Ç–æ–±—ã –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ –æ—Ç –∫–Ω–æ–ø–∫–∏
        # –≠—Ç–æ –≤–∞–∂–Ω–æ, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –≤–µ–ª–∞ —Å–µ–±—è —Ç–∞–∫ –∂–µ, –∫–∞–∫ –ø–æ–ª–µ –≤–≤–æ–¥–∞
        st.rerun() 

# --- –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ ---

# –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –≤–≤–æ–¥ –∏–∑ –ø–æ–ª—è —á–∞—Ç–∞
chat_prompt = st.chat_input("–ù–∞–ø—Ä–∏–º–µ—Ä: –ü–æ–∫–∞–∂–∏ –ø–µ—Ä–≤—ã—Ö 5 –∫–ª–∏–µ–Ω—Ç–æ–≤")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –≤–≤–æ–¥ –∏–∑ —á–∞—Ç–∞ –ò–õ–ò –æ—Ç –∫–Ω–æ–ø–∫–∏ (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –≤ session_state)
prompt_to_process = chat_prompt or st.session_state.get("user_input")

if prompt_to_process:
    # –í–∞–∂–Ω–æ: –°—Ä–∞–∑—É —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç –∫–Ω–æ–ø–∫–∏, —á—Ç–æ–±—ã –æ–Ω–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ
    if "user_input" in st.session_state:
        del st.session_state.user_input

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –µ–≥–æ
    st.session_state.messages.append({"role": "user", "content": prompt_to_process})
    
    # –ü–ï–†–ï–ó–ê–ü–£–°–ö–ê–ï–ú –°–¢–†–ê–ù–ò–¶–£, –ß–¢–û–ë–´ –°–†–ê–ó–£ –ü–û–ö–ê–ó–ê–¢–¨ –°–û–û–ë–©–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
    # –≠—Ç–æ—Ç rerun –Ω—É–∂–µ–Ω, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–∏–¥–µ–ª —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –¥–æ —Ç–æ–≥–æ, –∫–∞–∫ –∞–≥–µ–Ω—Ç –Ω–∞—á–Ω–µ—Ç –¥—É–º–∞—Ç—å.
    # –≠—Ç–æ —Å–æ–∑–¥–∞–µ—Ç –±–æ–ª–µ–µ –æ—Ç–∑—ã–≤—á–∏–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å.
    st.rerun()

# --- –ë–ª–æ–∫ –≤—ã–∑–æ–≤–∞ –∞–≥–µ–Ω—Ç–∞ —Ç–µ–ø–µ—Ä—å –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ü–û–°–õ–ï –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
# –ú—ã –∏—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–µ –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ.
last_message = st.session_state.messages[-1]
if last_message["role"] == "user" and st.session_state.get("last_processed_message") != last_message["content"]:
    
    with st.chat_message("assistant"):
        with st.spinner("ü§ñ –î—É–º–∞—é..."):
            try:
                prompt = last_message["content"]
                st.session_state.last_processed_message = prompt

                agent_input = {"input": prompt}
                response_dict = agent_executor.invoke(agent_input)
                
                if 'intermediate_steps' in response_dict and response_dict['intermediate_steps']:
                    for action, result in reversed(response_dict['intermediate_steps']):
                        if action.tool == 'display_table' and isinstance(action.tool_input, dict):
                            tool_input = action.tool_input
                            df = pd.DataFrame(tool_input.get('data', []), columns=tool_input.get('columns', []))
                            st.dataframe(df)
                            st.session_state.messages.append({"role": "assistant", "content": df})
                            break
                
                response_content = response_dict.get('output', '–ù–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.')
                if response_content:
                    st.markdown(response_content)
                    st.session_state.messages.append({"role": "assistant", "content": response_content})

            except Exception as e:
                import traceback
                error_message = traceback.format_exc()
                print(error_message)
                response_content = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}"
                st.error(response_content)
                st.session_state.messages.append({"role": "assistant", "content": response_content})
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π rerun, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –≤—Å—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    st.rerun()