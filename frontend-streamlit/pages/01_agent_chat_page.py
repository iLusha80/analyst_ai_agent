# frontend-streamlit/pages/01_chat.py (–í–ï–†–°–ò–Ø –î–õ–Ø –°–¢–ê–ë–ò–õ–¨–ù–û–ì–û –ì–†–ê–§–ê)

import streamlit as st
from langchain_core.messages import HumanMessage, AIMessage

from agent.agent_graph import agent_executor
from core import init_session_state  # –ü—Ä–æ–º–ø—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ

st.set_page_config(page_title="–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π —á–∞—Ç", page_icon="üí¨", layout="wide")

# init_session_state —Ç–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ —Å–æ–∑–¥–∞–µ—Ç –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
if "messages" not in st.session_state:
    st.session_state.messages = []

st.title("üí¨ –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π —á–∞—Ç")
st.markdown("–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –Ω–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —è–∑—ã–∫–µ.")

# –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
if not st.session_state.messages:
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
    st.session_state.messages.append(
        {"role": "assistant", "content": "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø Insight Agent. –ó–∞–¥–∞–π—Ç–µ –º–Ω–µ –≤–æ–ø—Ä–æ—Å."}
    )

for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

if prompt := st.chat_input("–ù–∞–ø—Ä–∏–º–µ—Ä: –°–∫–æ–ª—å–∫–æ —É –Ω–∞—Å –≤—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤?"):
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–∞—à—É –ª–æ–∫–∞–ª—å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é
    st.session_state.messages.append({"role": "user", "content": prompt})
    with st.chat_message("user"):
        st.markdown(prompt)

    with st.chat_message("assistant"):
        with st.spinner("ü§ñ –î—É–º–∞—é –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ..."):

            # –°–æ–±–∏—Ä–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –∞–≥–µ–Ω—Ç–∞ (–ë–ï–ó —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞)
            chat_history_for_agent = []
            # –ë–µ—Ä–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ
            for msg in st.session_state.messages[1:]:
                if msg["role"] == "user":
                    chat_history_for_agent.append(HumanMessage(content=msg["content"]))
                else:
                    chat_history_for_agent.append(AIMessage(content=msg["content"]))

            # –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - —ç—Ç–æ –∏—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
            agent_input = {"messages": chat_history_for_agent}

            try:
                response_dict = agent_executor.invoke(agent_input)
                response_content = response_dict['messages'][-1].content
            except Exception as e:
                import traceback

                print(traceback.format_exc())
                response_content = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {e}"
                st.error(response_content)

            st.markdown(response_content)
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞ –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é
            st.session_state.messages.append({"role": "assistant", "content": response_content})