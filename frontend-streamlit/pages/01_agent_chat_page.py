# frontend-streamlit/pages/01_chat.py (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)

import streamlit as st
from langchain_core.messages import HumanMessage, AIMessage

from core import init_session_state
from agent.agent_graph import get_agent_executor


@st.cache_resource
def load_agent_executor():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –∫—ç—à–∏—Ä—É–µ—Ç –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π –æ–±—ä–µ–∫—Ç –∞–≥–µ–Ω—Ç–∞."""
    return get_agent_executor()


# --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---

st.set_page_config(page_title="–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π —á–∞—Ç", page_icon="üí¨", layout="wide")
init_session_state()

st.title("üí¨ –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π —á–∞—Ç")
st.markdown("–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –Ω–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —è–∑—ã–∫–µ, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç –≤ –¥–∞–Ω–Ω—ã—Ö.")

for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

try:
    agent_executor = load_agent_executor()
except ValueError as e:
    st.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–∞: {e}")
    st.stop()

if prompt := st.chat_input("–ù–∞–ø—Ä–∏–º–µ—Ä: –°–∫–æ–ª—å–∫–æ —É –Ω–∞—Å –≤—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ –ú–æ—Å–∫–≤—ã?"):
    st.session_state.messages.append({"role": "user", "content": prompt})
    with st.chat_message("user"):
        st.markdown(prompt)

    with st.chat_message("assistant"):
        with st.spinner("ü§ñ –î—É–º–∞—é –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ..."):

            chat_history_for_agent = []
            for msg in st.session_state.messages[1:-1]:
                if msg["role"] == "user":
                    chat_history_for_agent.append(HumanMessage(content=msg["content"]))
                else:
                    chat_history_for_agent.append(AIMessage(content=msg["content"]))

            # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨ ---
            # –ú—ã –¥–æ–ª–∂–Ω—ã –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –ø–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π –æ–∂–∏–¥–∞–µ—Ç –≥—Ä–∞—Ñ,
            # –≤–∫–ª—é—á–∞—è –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –¥–ª—è intermediate_steps.
            agent_input = {
                "question": prompt,
                "chat_history": chat_history_for_agent,
                "intermediate_steps": []  # <--- –≠–¢–û–¢ –ö–õ–Æ–ß –†–ï–®–ê–ï–¢ –ü–†–û–ë–õ–ï–ú–£
            }

            try:
                # –í agent_graph.py —Ç–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ü–µ–ª–∏–∫–æ–º
                final_state = agent_executor.invoke(agent_input)
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–∑ —Å–ª–æ–≤–∞—Ä—è
                response_content = final_state['agent_outcome'].return_values['output']
            except Exception as e:
                # –î–æ–±–∞–≤–∏–º traceback –¥–ª—è –±–æ–ª–µ–µ —É–¥–æ–±–Ω–æ–π –æ—Ç–ª–∞–¥–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏
                import traceback

                print(traceback.format_exc())
                response_content = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {e}"
                st.error(response_content)

            st.markdown(response_content)
            st.session_state.messages.append({"role": "assistant", "content": response_content})