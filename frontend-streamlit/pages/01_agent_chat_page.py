# frontend-streamlit/pages/01_chat.py (–í–ï–†–°–ò–Ø –î–õ–Ø –ù–û–í–û–ì–û –ì–†–ê–§–ê)

import streamlit as st
from langchain_core.messages import HumanMessage, AIMessage

# –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∞–º –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π –æ–±—ä–µ–∫—Ç agent_executor
from agent.agent_graph import agent_executor, SYSTEM_PROMPT

from core import init_session_state

# --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
st.set_page_config(page_title="–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π —á–∞—Ç", page_icon="üí¨", layout="wide")

# –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º init_session_state, —á—Ç–æ–±—ã –æ–Ω –¥–æ–±–∞–≤–ª—è–ª —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
if "messages" not in st.session_state:
    st.session_state.messages = [
        {"role": "assistant", "content": SYSTEM_PROMPT}  # –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - —ç—Ç–æ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –∞–≥–µ–Ω—Ç–∞
    ]
    st.session_state.messages.append(
        {"role": "assistant", "content": "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø Insight Agent. –ó–∞–¥–∞–π—Ç–µ –º–Ω–µ –≤–æ–ø—Ä–æ—Å."}
    )

st.title("üí¨ –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π —á–∞—Ç")
st.markdown("–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –Ω–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —è–∑—ã–∫–µ.")

# –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é, –ø—Ä–æ–ø—É—Å–∫–∞—è –ø–µ—Ä–≤–æ–µ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
for message in st.session_state.messages[1:]:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

if prompt := st.chat_input("–ù–∞–ø—Ä–∏–º–µ—Ä: –°–∫–æ–ª—å–∫–æ —É –Ω–∞—Å –≤—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ –ú–æ—Å–∫–≤—ã?"):
    st.session_state.messages.append({"role": "user", "content": prompt})
    with st.chat_message("user"):
        st.markdown(prompt)

    with st.chat_message("assistant"):
        with st.spinner("ü§ñ –î—É–º–∞—é –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ..."):

            # –°–æ–±–∏—Ä–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –∞–≥–µ–Ω—Ç–∞ (–≤–∫–ª—é—á–∞—è —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç)
            chat_history_for_agent = []
            for msg in st.session_state.messages:
                if msg["role"] == "user":
                    chat_history_for_agent.append(HumanMessage(content=msg["content"]))
                else:  # assistant
                    chat_history_for_agent.append(AIMessage(content=msg["content"]))

            # –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
            agent_input = {"messages": chat_history_for_agent}

            try:
                # –í—ã–∑—ã–≤–∞–µ–º –∞–≥–µ–Ω—Ç
                response_dict = agent_executor.invoke(agent_input)
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                response_content = response_dict['messages'][-1].content
            except Exception as e:
                import traceback

                print(traceback.format_exc())
                response_content = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {e}"
                st.error(response_content)

            st.markdown(response_content)
            st.session_state.messages.append({"role": "assistant", "content": response_content})