# frontend-streamlit/pages/03_lc_agent_chat.py (–í–ï–†–°–ò–Ø –° –†–ï–ù–î–ï–†–ò–ù–ì–û–ú –¢–ê–ë–õ–ò–¶)

import streamlit as st
import pandas as pd
import ast  # –î–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ –≤ Python-–æ–±—ä–µ–∫—Ç

from lc_agent.agent_builder import create_lc_agent

st.set_page_config(
    page_title="–ß–∞—Ç —Å LangChain –ê–≥–µ–Ω—Ç–æ–º",
    page_icon="üîó",
    layout="wide"
)


@st.cache_resource
def load_agent():
    return create_lc_agent()


if "lc_messages" not in st.session_state:
    st.session_state.lc_messages = [
        {"role": "assistant", "content": "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π LangChain SQL –∞–≥–µ–Ω—Ç. –ó–∞–¥–∞–π—Ç–µ –º–Ω–µ –≤–æ–ø—Ä–æ—Å."}
    ]

st.title("üîó –ß–∞—Ç —Å LangChain –ê–≥–µ–Ω—Ç–æ–º (–°—Ç–∞–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)")
st.info("–≠—Ç–∞ –≤–µ—Ä—Å–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≤—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é `create_sql_agent` –∏–∑ LangChain –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–Ω–æ–π —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏.")

for message in st.session_state.lc_messages:
    with st.chat_message(message["role"]):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç DataFrame-–æ–º (–¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏)
        if isinstance(message["content"], pd.DataFrame):
            st.dataframe(message["content"])
        else:
            st.markdown(message["content"])

agent_executor = load_agent()

if prompt := st.chat_input("–ù–∞–ø—Ä–∏–º–µ—Ä: –ü–æ–∫–∞–∂–∏ –ø–µ—Ä–≤—ã—Ö 5 –∫–ª–∏–µ–Ω—Ç–æ–≤"):
    st.session_state.lc_messages.append({"role": "user", "content": prompt})
    with st.chat_message("user"):
        st.markdown(prompt)

    with st.chat_message("assistant"):
        with st.spinner("ü§ñ –î—É–º–∞—é... (LangChain)"):
            try:
                agent_input = {"input": prompt}
                response_dict = agent_executor.invoke(agent_input)

                # --- –ì–õ–ê–í–ù–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–ï–†–ï–•–í–ê–¢ –ò –†–ï–ù–î–ï–†–ò–ù–ì –¢–ê–ë–õ–ò–¶ ---
                table_displayed = False
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —à–∞–≥–∏ –∞–≥–µ–Ω—Ç–∞
                if 'intermediate_steps' in response_dict:
                    for action, result in response_dict['intermediate_steps']:
                        # –ò—â–µ–º –≤—ã–∑–æ–≤ –Ω–∞—à–µ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
                        if action.tool == 'display_table':
                            try:
                                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ Python-–æ–±—ä–µ–∫—Ç
                                data = ast.literal_eval(action.tool_input)
                                df = pd.DataFrame(data)

                                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º DataFrame –≤ —á–∞—Ç–µ
                                st.dataframe(df)
                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∞–º DataFrame –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ
                                st.session_state.lc_messages.append({"role": "assistant", "content": df})
                                table_displayed = True
                            except Exception as e:
                                st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É: {e}")

                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞
                response_content = response_dict['output']
                if table_displayed:
                    st.markdown(response_content)  # –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –±—ã–ª–∞, —Ç–µ–∫—Å—Ç –±—É–¥–µ—Ç –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º
                else:
                    st.markdown(response_content)  # –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü—ã –Ω–µ –±—ã–ª–æ, —ç—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–≤–µ—Ç

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é —á–∞—Å—Ç—å –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
                st.session_state.lc_messages.append({"role": "assistant", "content": response_content})

            except Exception as e:
                import traceback

                print(traceback.format_exc())
                response_content = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}"
                st.error(response_content)
                st.session_state.lc_messages.append({"role": "assistant", "content": response_content})