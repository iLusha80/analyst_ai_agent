# frontend-streamlit/pages/03_lc_agent_chat.py

import streamlit as st
from langchain_core.messages import HumanMessage, AIMessage

from lc_agent.agent_builder import create_lc_agent

# –ó–∞–¥–∞–µ–º –∏–º—è –∏ –∏–∫–æ–Ω–∫—É –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ß–∞—Ç —Å LangChain –ê–≥–µ–Ω—Ç–æ–º",
    page_icon="üîó",
    layout="wide"
)


# –ö—ç—à–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
@st.cache_resource
def load_agent():
    return create_lc_agent()


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –¥–ª—è —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
# –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥—Ä—É–≥–æ–π –∫–ª—é—á, —á—Ç–æ–±—ã –∏—Å—Ç–æ—Ä–∏–∏ –Ω–µ —Å–º–µ—à–∏–≤–∞–ª–∏—Å—å
if "lc_messages" not in st.session_state:
    st.session_state.lc_messages = [
        {"role": "assistant", "content": "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π LangChain SQL –∞–≥–µ–Ω—Ç. –ó–∞–¥–∞–π—Ç–µ –º–Ω–µ –≤–æ–ø—Ä–æ—Å."}
    ]

st.title("üîó –ß–∞—Ç —Å LangChain –ê–≥–µ–Ω—Ç–æ–º (–°—Ç–∞–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)")
st.info("–≠—Ç–∞ –≤–µ—Ä—Å–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≤—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é `create_sql_agent` –∏–∑ LangChain –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–Ω–æ–π —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏.")

# –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
for message in st.session_state.lc_messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–≥–µ–Ω—Ç–∞
agent_executor = load_agent()

if prompt := st.chat_input("–ù–∞–ø—Ä–∏–º–µ—Ä: –ö–∞–∫–∏–µ —É –Ω–∞—Å –µ—Å—Ç—å —Ç–∞–±–ª–∏—Ü—ã?"):
    st.session_state.lc_messages.append({"role": "user", "content": prompt})
    with st.chat_message("user"):
        st.markdown(prompt)

    with st.chat_message("assistant"):
        with st.spinner("ü§ñ –î—É–º–∞—é... (LangChain)"):
            try:
                # –í—Ö–æ–¥ –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ - —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —Å–ª–æ–≤–∞—Ä—å —Å –∫–ª—é—á–æ–º 'input'
                agent_input = {"input": prompt}

                # –í—ã–∑—ã–≤–∞–µ–º –∞–≥–µ–Ω—Ç
                response_dict = agent_executor.invoke(agent_input)

                # –û—Ç–≤–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–ª—é—á–µ 'output'
                response_content = response_dict['output']

            except Exception as e:
                import traceback

                print(traceback.format_exc())
                response_content = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}"
                st.error(response_content)

            st.markdown(response_content)
            st.session_state.lc_messages.append({"role": "assistant", "content": response_content})
